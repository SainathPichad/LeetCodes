

Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".








class Solution {
    public int longestPalindromeSubseq(String s) {
      
        char ch;
        String sbr="";
          for (int i=0; i<s.length(); i++)
      {
        ch= s.charAt(i); //extracts each character
        sbr= ch+sbr; //adds each character in front of the existing string
      }
        int n=s.length();
        int m=sbr.length();
          System.out.println(sbr);
     int   ans=lon(s,sbr,n,m);
        return ans;
    }
    
    
      
  
  
     static int memo[][];
    public static int lon(String t1, String t2,int n,int m) {
       
        memo=new int[n+1][m+1];
    for(int[] i: memo)
	    {
	        Arrays.fill(i,-1);
	    }
        int ans=lcs(t1,t2,n,m);
        return ans;
            
    }
    static int lcs(String s1,String s2,int n,int m){
      if(memo[n][m]!=-1)
                return memo[n][m];
                
            if(n==0 || m==0)
                memo[n][m]=0;
                
            else
            {
                if(s1.charAt(n-1)==s2.charAt(m-1))
                    memo[n][m] = 1 + lcs(s1,s2,n-1,m-1);
                else
                    memo[n][m] = Math.max(lcs(s1,s2,n-1,m),lcs(s1,s2,n,m-1));
            }
            
            return memo[n][m];
    }
  
}